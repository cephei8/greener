@page "/auth/login"
@using GreenerBlazor.Helpers
@using GreenerBlazor.Models
@using GreenerBlazor.Services
@attribute [AllowAnonymous]
@inject ExceptionService ExceptionService
@inject NavigationManager NavManager
@inject AuthService AuthService
@inject IConfiguration Config

<PageTitle>Log In</PageTitle>

<EditForm Model="@LoginRequestDto" OnValidSubmit="@Authenticate" FormName="login_form">
    <DataAnnotationsValidator/>

    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center"
                 VerticalAlignment="VerticalAlignment.Center">
        <h2>Log In</h2>
        <div>
            <FluentTextField Name="username" @bind-Value="LoginRequestDto.Username" Label="Username"
                             TextFieldType="TextFieldType.Text" Required/>
        </div>
        <FluentValidationMessage For="@(() => LoginRequestDto.Username)"/>
        <div>
            <FluentTextField Name="password" @bind-Value="LoginRequestDto.Password" Label="Password"
                             TextFieldType="TextFieldType.Password" Required/>
        </div>
        <FluentValidationMessage For="@(() => LoginRequestDto.Password)"/>
        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Log In</FluentButton>
    </FluentStack>
</EditForm>

@code {

    [SupplyParameterFromForm] private LoginRequestDto LoginRequestDto { get; set; } = new();

    private async Task Authenticate()
    {
        try
        {
            await AuthService.LoginAsync(LoginRequestDto, CancellationToken.None);
        }
        catch (HttpRequestException exc)
        {
            if (await ExceptionService.HandleAsMessageBox(exc))
            {
                return;
            }

            throw;
        }

        NavManager.NavigateTo("/");
    }

}

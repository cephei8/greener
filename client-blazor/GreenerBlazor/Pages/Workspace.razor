@page "/"
@using GreenerBlazor.Helpers
@using GreenerBlazor.Models
@using GreenerBlazor.Services
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@inject TestcaseService TestcaseService
@inject SessionService SessionService
@inject LabelService LabelService
@inject GroupService GroupService
@inject ApiClient ApiClient
@inject ExceptionService ExceptionService

<PageTitle>Workspace</PageTitle>

<FluentMessageBarProvider @rendermode="InteractiveWebAssembly" Section="MESSAGES_TOP"/>

<FluentMultiSplitter>
    <FluentMultiSplitterPane Size="70%">
        <FluentMultiSplitter Orientation="Orientation.Vertical">
            <FluentMultiSplitterPane Size="40%" Collapsible="true">
                <div>
                    <FluentStack Orientation="Orientation.Vertical" Style="height: 140px">
                        <FluentLabel Typo="Typography.H5">Query</FluentLabel>
                        <FluentStack Orientation="Orientation.Horizontal" Style="height: 100%">
                            <FluentTextArea @bind-Value="_query" style="width: 100%; height: 100%;">
                                <style>
                                    ::part(control) {
                                        height: 100%;
                                    }
                                </style>
                            </FluentTextArea>
                            <FluentStack Orientation="Orientation.Vertical" Width="600px">
                                <FluentButton Title="Run query" IconStart="@(new Icons.Filled.Size20.Search())"
                                              Appearance="Appearance.Accent" OnClick="@(OnQueryRun)">Run query
                                </FluentButton>
                                <FluentStack Orientation="Orientation.Horizontal"
                                             VerticalAlignment="VerticalAlignment.Center">
                                    <FluentLabel Style="width: 65px">Start date:</FluentLabel>
                                    <FluentDatePicker Value="@_startDate.ToDateTimeNullable()"
                                                      ValueChanged="@(e => _startDate = e.ToDateOnlyNullable())"
                                                      Style="width: 125px"/>
                                    <FluentTimePicker Value="@_startTime.ToDateTimeNullable()"
                                                      ValueChanged="@(e => _startTime = e.ToTimeOnlyNullable())"/>
                                </FluentStack>
                                <FluentStack Orientation="Orientation.Horizontal"
                                             VerticalAlignment="VerticalAlignment.Center">
                                    <FluentLabel Style="width: 65px">End date:</FluentLabel>
                                    <FluentDatePicker Value="@_endDate.ToDateTimeNullable()"
                                                      ValueChanged="@(e => _endDate = e.ToDateOnlyNullable())"
                                                      Style="width: 125px"/>
                                    <FluentTimePicker Value="@_endTime.ToDateTimeNullable()"
                                                      ValueChanged="@(e => _endTime = e.ToTimeOnlyNullable())"/>
                                </FluentStack>
                            </FluentStack>
                        </FluentStack>
                    </FluentStack>
                    <br/>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Typo="Typography.H5">Groups</FluentLabel>
                        <FluentSpacer/>
                        <FluentLabel Color="Color.Accent" Weight="FontWeight.Bold">
                            Aggregated status:
                            <FluentIcon Title="@(Ext.ConvertTestcaseStatus(_aggregatedGroupsStatus).Item1)"
                                        Value="@(Ext.ConvertTestcaseStatus(_aggregatedGroupsStatus).Item2)"
                                        Color="@Color.Accent"/>
                        </FluentLabel>
                        <FluentSpacer Width="50"/>
                    </FluentStack>
                    <div style="height: calc(100% - 140px - 70px);">
                        <FluentDataGrid @ref="GroupGrid"
                                        ItemsProvider="@_groupGridItemsProvider"
                                        ShowHover="true" Pagination="@_groupPagination"
                                        GenerateHeader="@GenerateHeaderOption.Sticky"
                                        ItemSize="28" TGridItem="GroupRow"
                                        AutoItemsPerPage="true"
                                        Style="overflow-y: hidden;">
                            <SelectColumn TGridItem="GroupRow" Width="50px" @ref="_groupSelectColumn"
                                          SelectMode="DataGridSelectMode.SingleSticky"
                                          SelectFromEntireRow="true"
                                          OnSelect="@(e => OnGroupSelected(e.Item, e.Selected))"/>
                            <TemplateColumn Title="Status" Align="Align.Center" Width="100px">
                                <FluentIcon Title="@(context.StatusTitle)" Value="@(context.StatusIcon)"
                                            Color="@Color.Accent"/>
                            </TemplateColumn>
                            <PropertyColumn Property="@(g => g.Id)" Title="Group"/>
                        </FluentDataGrid>
                        <FluentPaginator State="@_groupPagination"/>
                    </div>
                </div>
            </FluentMultiSplitterPane>
            <FluentMultiSplitterPane>
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentLabel Typo="Typography.H5">Testcases</FluentLabel>
                    <FluentSpacer/>
                    <FluentLabel Color="Color.Accent" Weight="FontWeight.Bold" Alignment="HorizontalAlignment.End">
                        Aggregated status:
                        <FluentIcon Title="@(Ext.ConvertTestcaseStatus(_aggregatedTestcasesStatus).Item1)"
                                    Value="@(Ext.ConvertTestcaseStatus(_aggregatedTestcasesStatus).Item2)"
                                    Color="@Color.Accent"/>
                    </FluentLabel>
                    <FluentSpacer Width="50"/>
                </FluentStack>
                <div style="height: calc(100% - 70px);">
                    <FluentDataGrid @ref="TestcaseGrid"
                                    ItemsProvider="@_testcaseGridItemsProvider"
                                    ItemSize="28" Pagination="@_testcasePagination"
                                    GenerateHeader="@GenerateHeaderOption.Sticky" TGridItem="TestcaseRow"
                                    ShowHover="true" ResizableColumns="true"
                                    AutoItemsPerPage="true"
                                    Style="overflow-y: hidden;">
                        <SelectColumn TGridItem="TestcaseRow" Width="50px" @ref="_testcaseSelectColumn"
                                      SelectMode="DataGridSelectMode.SingleSticky"
                                      SelectFromEntireRow="true"
                                      OnSelect="@(e => OnTestcaseSelected(e.Item, e.Selected))"/>
                        <TemplateColumn Title="Status" Align="Align.Center" Width="100px">
                            <FluentIcon Title="@(context.StatusTitle)" Value="@(context.StatusIcon)"
                                        Color="@Color.Accent"/>
                        </TemplateColumn>
                        <PropertyColumn Property="@(c => c.Session)" Width="110px"/>
                        <PropertyColumn Property="@(c => c.Id)" Width="110px"/>
                        <PropertyColumn Property="@(c => c.Name)"/>
                    </FluentDataGrid>
                    <FluentPaginator State="@_testcasePagination"/>
                </div>
            </FluentMultiSplitterPane>
        </FluentMultiSplitter>
    </FluentMultiSplitterPane>
    <FluentMultiSplitterPane Collapsible="true">
        <FluentLabel Typo="Typography.H5">Details</FluentLabel>
        <FluentTabs>
            <FluentTab Label="Testcase details">
                <br/>
                <FluentLabel Weight="FontWeight.Bold">
                    Status:
                    <FluentIcon Title="@(Ext.ConvertTestcaseStatus(_testcaseDetails?.Status).Item1)"
                                Value="@(Ext.ConvertTestcaseStatus(_testcaseDetails?.Status).Item2)"
                                Color="@Color.Accent"/>
                </FluentLabel>
                <br/>
                <h5>Properties</h5>
                <FluentDataGrid Items="@_testcaseDetails?.Properties">
                    <PropertyColumn Property="@(p => p.Property)" Width="120px"/>
                    <PropertyColumn Property="@(p => p.Value)"/>
                </FluentDataGrid>
                <br/>
                <FluentTabs>
                    <FluentTab Label="Output">
                        <div style="white-space: pre-wrap; font-family: monospace;">@_testcaseDetails?.Output</div>
                    </FluentTab>
                    <FluentTab Label="Baggage">
                        <div style="white-space: pre-wrap; font-family: monospace;">@_testcaseDetails?.Baggage</div>
                    </FluentTab>
                </FluentTabs>
            </FluentTab>
            <FluentTab Label="Session details">
                <br/>
                <h5>Properties</h5>
                <FluentDataGrid Items="@_sessionDetails?.Properties">
                    <PropertyColumn Property="@(p => p.Property)" Width="120px"/>
                    <PropertyColumn Property="@(p => p.Value)"/>
                </FluentDataGrid>
                <br/>
                <h5>Labels</h5>
                <FluentDataGrid Items="@_sessionDetails?.Labels" ResizableColumns="true">
                    <PropertyColumn Property="@(p => p.Key)" Width="120px"/>
                    <PropertyColumn Property="@(p => p.Value)"/>
                </FluentDataGrid>
                <br/>
                <FluentTabs>
                    <FluentTab Label="Baggage">
                        <div style="white-space: pre-wrap; font-family: monospace;">@_sessionDetails?.Baggage</div>
                    </FluentTab>
                </FluentTabs>
            </FluentTab>
        </FluentTabs>
    </FluentMultiSplitterPane>
</FluentMultiSplitter>


@code {
    private DateOnly? _startDate;
    private TimeOnly? _startTime;

    private DateOnly? _endDate;
    private TimeOnly? _endTime;

    public required FluentDataGrid<TestcaseRow> TestcaseGrid;
    public required FluentDataGrid<GroupRow> GroupGrid;

    readonly PaginationState _testcasePagination = new();
    readonly PaginationState _groupPagination = new();

    string? _query;

    TestcaseStatus? _aggregatedTestcasesStatus;
    TestcaseStatus? _aggregatedGroupsStatus;

    private async Task OnGroupSelected(GroupRow groupRow, bool selected)
    {
        if (!selected)
        {
            _aggregatedTestcasesStatus = null;
            await _testcaseSelectColumn.ClearSelectionAsync();
            _sessionDetails = null;
            _testcaseDetails = null;

            _testcaseItemsProvider = null!;
            _testcaseGridItemsProvider = null!;
            return;
        }

        _testcaseItemsProvider = CreateTestcaseItemsProvider(groupRow, _query, MakeStartDate(), MakeEndDate());
        _testcaseGridItemsProvider = _testcaseItemsProvider.HandleAsync;
    }

    private Task OnGroupsResponseFetched(GroupPaginatedResponseDto response)
    {
        _aggregatedGroupsStatus = response.AggregatedStatus;

        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnTestcasesResponseFetched(TestcasePaginatedResponseDto response)
    {
        // Take any status since they are duplicated for each item
        _aggregatedTestcasesStatus = response.AggregatedStatus;

        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnTestcaseSelected(TestcaseRow testcaseRow, bool selected)
    {
        if (!selected)
        {
            _sessionDetails = null;
            _testcaseDetails = null;
            return;
        }

        Task.Run(async () =>
        {
            SessionDto sessionResponse;
            try
            {
                sessionResponse = await SessionService.GetSessionAsync(
                    testcaseRow.Session, CancellationToken.None
                );
            }
            catch (HttpRequestException exc)
            {
                if (await ExceptionService.HandleAsMessageBar(exc))
                {
                    return;
                }

                throw;
            }

            var properties = new List<EntityProperty>
            {
                new("Id", testcaseRow.Session),
                new("Description", sessionResponse.Description ?? "")
            };

            List<SessionLabel> labels;
            try
            {
                var labelsResponse = await LabelService.GetLabelsBySessionAsync(
                    testcaseRow.Session,
                    0,
                    100,
                    CancellationToken.None
                );
                labels = labelsResponse.Items
                    .Select(l => new SessionLabel(l.Key, l.Value))
                    .ToList();
            }
            catch (HttpRequestException exc)
            {
                if (await ExceptionService.HandleAsMessageBar(exc))
                {
                    labels = new List<SessionLabel>();
                }
                else
                {
                    throw;
                }
            }

            _sessionDetails = new SessionDetails(
                properties.AsQueryable(),
                labels.AsQueryable(),
                sessionResponse.Baggage?.RootElement.GetRawText());

            StateHasChanged();
        });

        Task.Run(async () =>
        {
            TestcaseDto testcaseResponse;
            try
            {
                testcaseResponse = await TestcaseService.GetTestcaseAsync(
                    testcaseRow.Id,
                    CancellationToken.None
                );
            }
            catch (HttpRequestException exc)
            {
                if (await ExceptionService.HandleAsMessageBar(exc))
                {
                    return;
                }

                throw;
            }

            var properties = new List<EntityProperty>
            {
                new("Id", testcaseRow.Id),
                new("SessionId", testcaseRow.Session),
                new("Name", testcaseResponse.Name),
                new("Classname", testcaseResponse.Classname ?? ""),
                new("File", testcaseResponse.File ?? ""),
                new("Testsuite", testcaseResponse.Testsuite ?? "")
            };

            _testcaseDetails = new TestcaseDetails(
                properties.AsQueryable(),
                testcaseResponse.Status,
                testcaseResponse.Output,
                testcaseResponse.Baggage?.RootElement.GetRawText());

            StateHasChanged();
        });
    }

    SelectColumn<GroupRow> _groupSelectColumn = null!;
    SelectColumn<TestcaseRow> _testcaseSelectColumn = null!;

    private static DateTime? MakeDate(DateOnly? date, TimeOnly? time)
    {
        if (date == null)
        {
            return null;
        }

        if (time == null)
        {
            return date.Value.ToDateTime().ToUniversalTime();
        }

        return date.Value.ToDateTime().Add(time.Value.ToTimeSpan()).ToUniversalTime();
    }

    private DateTime? MakeStartDate() => MakeDate(_startDate, _startTime);
    private DateTime? MakeEndDate() => MakeDate(_endDate, _endTime);

    private async Task OnQueryRun()
    {
        _aggregatedTestcasesStatus = null;
        _aggregatedGroupsStatus = null;

        ExceptionService.ClearMessageBar();

        bool isGroupingQuery = false;
        if (_query != null)
        {
            try
            {
                var result = await ApiClient.GetAsync<QueryValidationResult>(
                    $"/api/v1/groups/validate-query?queryStr={Uri.EscapeDataString(_query)}",
                    CancellationToken.None
                );
                isGroupingQuery = result.IsGrouping;
            }
            catch (HttpRequestException exc)
            {
                if (await ExceptionService.HandleAsMessageBar(exc))
                {
                    return;
                }
                throw;
            }
        }

        await _groupSelectColumn.ClearSelectionAsync();
        await _testcaseSelectColumn.ClearSelectionAsync();
        _sessionDetails = null;
        _testcaseDetails = null;

        if (isGroupingQuery)
        {
            _testcaseItemsProvider = null!;
            _testcaseGridItemsProvider = null!;

            _groupGridItemsProvider = null!;
            await GroupGrid.RefreshDataAsync();

            _groupItemsProvider = CreateGroupItemsProvider(_query, MakeStartDate(), MakeEndDate());
            _groupGridItemsProvider = _groupItemsProvider.HandleAsync;
        }
        else
        {
            _testcaseGridItemsProvider = null!;
            await TestcaseGrid.RefreshDataAsync();

            _testcaseItemsProvider = CreateTestcaseItemsProvider(null, _query, MakeStartDate(), MakeEndDate());
            _testcaseGridItemsProvider = _testcaseItemsProvider.HandleAsync;

            _groupItemsProvider = null!;
            _groupGridItemsProvider = null!;
        }
    }

    ItemsProvider<GroupRow, GroupListRequest, GroupPaginatedResponseDto> _groupItemsProvider = null!;

    GridItemsProvider<GroupRow> _groupGridItemsProvider = null!;

    ItemsProvider<TestcaseRow, TestcaseListRequest, TestcasePaginatedResponseDto> _testcaseItemsProvider = null!;

    GridItemsProvider<TestcaseRow> _testcaseGridItemsProvider = null!;

    protected override void OnInitialized()
    {
        _testcaseItemsProvider = CreateTestcaseItemsProvider(null, _query, MakeStartDate(), MakeEndDate());
        _testcaseGridItemsProvider = _testcaseItemsProvider.HandleAsync;
    }

    private ItemsProvider<GroupRow, GroupListRequest, GroupPaginatedResponseDto>
        CreateGroupItemsProvider(string? query, DateTime? startDate, DateTime? endDate)
    {
        var adapter = new GroupItemsProviderAdapter(
            GroupService,
            OnGroupsResponseFetched,
            query,
            startDate,
            endDate
        );
        return new ItemsProvider<GroupRow, GroupListRequest, GroupPaginatedResponseDto>(
            ExceptionService,
            adapter
        );
    }

    private ItemsProvider<
            TestcaseRow,
            TestcaseListRequest,
            TestcasePaginatedResponseDto>
        CreateTestcaseItemsProvider(GroupRow? groupRow, string? query, DateTime? startDate, DateTime? endDate)
    {
        string? group = groupRow?.CreateGroupParameterJson();
        var adapter = new TestcaseRestItemsProviderAdapter(
            TestcaseService,
            OnTestcasesResponseFetched,
            query,
            startDate,
            endDate,
            group);
        return new ItemsProvider<TestcaseRow, TestcaseListRequest, TestcasePaginatedResponseDto>(ExceptionService, adapter);
    }

    record EntityProperty(string Property, string Value);

    record SessionLabel(string Key, string? Value);

    record SessionDetails(IQueryable<EntityProperty> Properties, IQueryable<SessionLabel> Labels, string? Baggage);

    record TestcaseDetails(IQueryable<EntityProperty> Properties, TestcaseStatus? Status, string? Output, string? Baggage);

    SessionDetails? _sessionDetails;
    TestcaseDetails? _testcaseDetails;
}